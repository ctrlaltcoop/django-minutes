/* tslint:disable */
/* eslint-disable */
/**
 * Minutes API V1
 * django-minutes API specifications
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AgendaItem,
    AgendaItemFromJSON,
    AgendaItemToJSON,
    AgendaItemResponse,
    AgendaItemResponseFromJSON,
    AgendaItemResponseToJSON,
    AnonymousVote,
    AnonymousVoteFromJSON,
    AnonymousVoteToJSON,
    AnonymousVoteResponse,
    AnonymousVoteResponseFromJSON,
    AnonymousVoteResponseToJSON,
    Decision,
    DecisionFromJSON,
    DecisionToJSON,
    DecisionResponse,
    DecisionResponseFromJSON,
    DecisionResponseToJSON,
    Meeting,
    MeetingFromJSON,
    MeetingToJSON,
    MeetingResponse,
    MeetingResponseFromJSON,
    MeetingResponseToJSON,
    MeetingSeries,
    MeetingSeriesFromJSON,
    MeetingSeriesToJSON,
    MeetingSeriesResponse,
    MeetingSeriesResponseFromJSON,
    MeetingSeriesResponseToJSON,
    RollCallVote,
    RollCallVoteFromJSON,
    RollCallVoteToJSON,
    RollCallVoteResponse,
    RollCallVoteResponseFromJSON,
    RollCallVoteResponseToJSON,
    SubItem,
    SubItemFromJSON,
    SubItemToJSON,
    SubItemResponse,
    SubItemResponseFromJSON,
    SubItemResponseToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserResponse,
    UserResponseFromJSON,
    UserResponseToJSON,
    VoteChoice,
    VoteChoiceFromJSON,
    VoteChoiceToJSON,
    VoteChoiceResponse,
    VoteChoiceResponseFromJSON,
    VoteChoiceResponseToJSON,
} from '../models';

export interface CreateAgendaItemRequest {
    agendaItem?: AgendaItem;
}

export interface CreateAnonymousVoteRequest {
    anonymousVote?: AnonymousVote;
}

export interface CreateDecisionRequest {
    decision?: Decision;
}

export interface CreateMeetingRequest {
    meeting?: Meeting;
}

export interface CreateMeetingSeriesRequest {
    meetingSeries?: MeetingSeries;
}

export interface CreateRollCallVoteRequest {
    rollCallVote?: RollCallVote;
}

export interface CreateSubItemRequest {
    subItem?: SubItem;
}

export interface CreateUserRequest {
    user?: User;
}

export interface CreateVoteChoiceRequest {
    voteChoice?: VoteChoice;
}

export interface DestroyAgendaItemRequest {
    id: string;
    meeting?: string;
    mentions?: string;
}

export interface DestroyAnonymousVoteRequest {
    id: string;
    decision?: string;
}

export interface DestroyDecisionRequest {
    id: string;
    agendaItem?: string;
}

export interface DestroyMeetingRequest {
    id: string;
}

export interface DestroyMeetingSeriesRequest {
    id: string;
}

export interface DestroyRollCallVoteRequest {
    id: string;
    decision?: string;
}

export interface DestroySubItemRequest {
    id: string;
    agendaItem?: string;
}

export interface DestroyUserRequest {
    id: string;
}

export interface DestroyVoteChoiceRequest {
    id: string;
}

export interface ListAgendaItemsRequest {
    limit?: number;
    offset?: number;
    meeting?: string;
    mentions?: string;
}

export interface ListAnonymousVotesRequest {
    limit?: number;
    offset?: number;
    decision?: string;
}

export interface ListDecisionsRequest {
    limit?: number;
    offset?: number;
    agendaItem?: string;
}

export interface ListMeetingSeriesRequest {
    limit?: number;
    offset?: number;
}

export interface ListMeetingsRequest {
    limit?: number;
    offset?: number;
}

export interface ListRollCallVotesRequest {
    limit?: number;
    offset?: number;
    decision?: string;
}

export interface ListSubItemsRequest {
    limit?: number;
    offset?: number;
    agendaItem?: string;
}

export interface ListUsersRequest {
    limit?: number;
    offset?: number;
}

export interface ListVoteChoicesRequest {
    limit?: number;
    offset?: number;
}

export interface PartialUpdateAgendaItemRequest {
    id: string;
    meeting?: string;
    mentions?: string;
    agendaItem?: AgendaItem;
}

export interface PartialUpdateAnonymousVoteRequest {
    id: string;
    decision?: string;
    anonymousVote?: AnonymousVote;
}

export interface PartialUpdateDecisionRequest {
    id: string;
    agendaItem?: string;
    decision?: Decision;
}

export interface PartialUpdateMeetingRequest {
    id: string;
    meeting?: Meeting;
}

export interface PartialUpdateMeetingSeriesRequest {
    id: string;
    meetingSeries?: MeetingSeries;
}

export interface PartialUpdateRollCallVoteRequest {
    id: string;
    decision?: string;
    rollCallVote?: RollCallVote;
}

export interface PartialUpdateSubItemRequest {
    id: string;
    agendaItem?: string;
    subItem?: SubItem;
}

export interface PartialUpdateUserRequest {
    id: string;
    user?: User;
}

export interface PartialUpdateVoteChoiceRequest {
    id: string;
    voteChoice?: VoteChoice;
}

export interface RetrieveAgendaItemRequest {
    id: string;
    meeting?: string;
    mentions?: string;
}

export interface RetrieveAnonymousVoteRequest {
    id: string;
    decision?: string;
}

export interface RetrieveDecisionRequest {
    id: string;
    agendaItem?: string;
}

export interface RetrieveMeetingRequest {
    id: string;
}

export interface RetrieveMeetingSeriesRequest {
    id: string;
}

export interface RetrieveRollCallVoteRequest {
    id: string;
    decision?: string;
}

export interface RetrieveSubItemRequest {
    id: string;
    agendaItem?: string;
}

export interface RetrieveUserRequest {
    id: string;
}

export interface RetrieveVoteChoiceRequest {
    id: string;
}

export interface UpdateAgendaItemRequest {
    id: string;
    meeting?: string;
    mentions?: string;
    agendaItem?: AgendaItem;
}

export interface UpdateAnonymousVoteRequest {
    id: string;
    decision?: string;
    anonymousVote?: AnonymousVote;
}

export interface UpdateDecisionRequest {
    id: string;
    agendaItem?: string;
    decision?: Decision;
}

export interface UpdateMeetingRequest {
    id: string;
    meeting?: Meeting;
}

export interface UpdateMeetingSeriesRequest {
    id: string;
    meetingSeries?: MeetingSeries;
}

export interface UpdateRollCallVoteRequest {
    id: string;
    decision?: string;
    rollCallVote?: RollCallVote;
}

export interface UpdateSubItemRequest {
    id: string;
    agendaItem?: string;
    subItem?: SubItem;
}

export interface UpdateUserRequest {
    id: string;
    user?: User;
}

export interface UpdateVoteChoiceRequest {
    id: string;
    voteChoice?: VoteChoice;
}

/**
 * no description
 */
export class MinutesApi extends runtime.BaseAPI {

    /**
     */
    async createAgendaItemRaw(requestParameters: CreateAgendaItemRequest): Promise<runtime.ApiResponse<AgendaItem>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/agendaitem/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgendaItemToJSON(requestParameters.agendaItem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgendaItemFromJSON(jsonValue));
    }

    /**
     */
    async createAgendaItem(requestParameters: CreateAgendaItemRequest): Promise<AgendaItem> {
        const response = await this.createAgendaItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createAnonymousVoteRaw(requestParameters: CreateAnonymousVoteRequest): Promise<runtime.ApiResponse<AnonymousVote>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/anonymousvote/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnonymousVoteToJSON(requestParameters.anonymousVote),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnonymousVoteFromJSON(jsonValue));
    }

    /**
     */
    async createAnonymousVote(requestParameters: CreateAnonymousVoteRequest): Promise<AnonymousVote> {
        const response = await this.createAnonymousVoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createDecisionRaw(requestParameters: CreateDecisionRequest): Promise<runtime.ApiResponse<Decision>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/decision/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DecisionToJSON(requestParameters.decision),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DecisionFromJSON(jsonValue));
    }

    /**
     */
    async createDecision(requestParameters: CreateDecisionRequest): Promise<Decision> {
        const response = await this.createDecisionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createMeetingRaw(requestParameters: CreateMeetingRequest): Promise<runtime.ApiResponse<Meeting>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/meeting/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingToJSON(requestParameters.meeting),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingFromJSON(jsonValue));
    }

    /**
     */
    async createMeeting(requestParameters: CreateMeetingRequest): Promise<Meeting> {
        const response = await this.createMeetingRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createMeetingSeriesRaw(requestParameters: CreateMeetingSeriesRequest): Promise<runtime.ApiResponse<MeetingSeries>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/meetingseries/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingSeriesToJSON(requestParameters.meetingSeries),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingSeriesFromJSON(jsonValue));
    }

    /**
     */
    async createMeetingSeries(requestParameters: CreateMeetingSeriesRequest): Promise<MeetingSeries> {
        const response = await this.createMeetingSeriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createRollCallVoteRaw(requestParameters: CreateRollCallVoteRequest): Promise<runtime.ApiResponse<RollCallVote>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/rollcallvote/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RollCallVoteToJSON(requestParameters.rollCallVote),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RollCallVoteFromJSON(jsonValue));
    }

    /**
     */
    async createRollCallVote(requestParameters: CreateRollCallVoteRequest): Promise<RollCallVote> {
        const response = await this.createRollCallVoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createSubItemRaw(requestParameters: CreateSubItemRequest): Promise<runtime.ApiResponse<SubItem>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/agendasubitem/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubItemToJSON(requestParameters.subItem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubItemFromJSON(jsonValue));
    }

    /**
     */
    async createSubItem(requestParameters: CreateSubItemRequest): Promise<SubItem> {
        const response = await this.createSubItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async createUser(requestParameters: CreateUserRequest): Promise<User> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createVoteChoiceRaw(requestParameters: CreateVoteChoiceRequest): Promise<runtime.ApiResponse<VoteChoice>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/votechoice/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VoteChoiceToJSON(requestParameters.voteChoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteChoiceFromJSON(jsonValue));
    }

    /**
     */
    async createVoteChoice(requestParameters: CreateVoteChoiceRequest): Promise<VoteChoice> {
        const response = await this.createVoteChoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async destroyAgendaItemRaw(requestParameters: DestroyAgendaItemRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyAgendaItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }

        if (requestParameters.mentions !== undefined) {
            queryParameters['mentions'] = requestParameters.mentions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/agendaitem/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyAgendaItem(requestParameters: DestroyAgendaItemRequest): Promise<void> {
        await this.destroyAgendaItemRaw(requestParameters);
    }

    /**
     */
    async destroyAnonymousVoteRaw(requestParameters: DestroyAnonymousVoteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyAnonymousVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/anonymousvote/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyAnonymousVote(requestParameters: DestroyAnonymousVoteRequest): Promise<void> {
        await this.destroyAnonymousVoteRaw(requestParameters);
    }

    /**
     */
    async destroyDecisionRaw(requestParameters: DestroyDecisionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyDecision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/decision/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyDecision(requestParameters: DestroyDecisionRequest): Promise<void> {
        await this.destroyDecisionRaw(requestParameters);
    }

    /**
     */
    async destroyMeetingRaw(requestParameters: DestroyMeetingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyMeeting.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/meeting/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyMeeting(requestParameters: DestroyMeetingRequest): Promise<void> {
        await this.destroyMeetingRaw(requestParameters);
    }

    /**
     */
    async destroyMeetingSeriesRaw(requestParameters: DestroyMeetingSeriesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyMeetingSeries.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/meetingseries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyMeetingSeries(requestParameters: DestroyMeetingSeriesRequest): Promise<void> {
        await this.destroyMeetingSeriesRaw(requestParameters);
    }

    /**
     */
    async destroyRollCallVoteRaw(requestParameters: DestroyRollCallVoteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyRollCallVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/rollcallvote/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyRollCallVote(requestParameters: DestroyRollCallVoteRequest): Promise<void> {
        await this.destroyRollCallVoteRaw(requestParameters);
    }

    /**
     */
    async destroySubItemRaw(requestParameters: DestroySubItemRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroySubItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/agendasubitem/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroySubItem(requestParameters: DestroySubItemRequest): Promise<void> {
        await this.destroySubItemRaw(requestParameters);
    }

    /**
     */
    async destroyUserRaw(requestParameters: DestroyUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyUser(requestParameters: DestroyUserRequest): Promise<void> {
        await this.destroyUserRaw(requestParameters);
    }

    /**
     */
    async destroyVoteChoiceRaw(requestParameters: DestroyVoteChoiceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyVoteChoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/votechoice/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyVoteChoice(requestParameters: DestroyVoteChoiceRequest): Promise<void> {
        await this.destroyVoteChoiceRaw(requestParameters);
    }

    /**
     */
    async listAgendaItemsRaw(requestParameters: ListAgendaItemsRequest): Promise<runtime.ApiResponse<AgendaItemResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }

        if (requestParameters.mentions !== undefined) {
            queryParameters['mentions'] = requestParameters.mentions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/agendaitem/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgendaItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async listAgendaItems(requestParameters: ListAgendaItemsRequest): Promise<AgendaItemResponse> {
        const response = await this.listAgendaItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listAnonymousVotesRaw(requestParameters: ListAnonymousVotesRequest): Promise<runtime.ApiResponse<AnonymousVoteResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/anonymousvote/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnonymousVoteResponseFromJSON(jsonValue));
    }

    /**
     */
    async listAnonymousVotes(requestParameters: ListAnonymousVotesRequest): Promise<AnonymousVoteResponse> {
        const response = await this.listAnonymousVotesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listDecisionsRaw(requestParameters: ListDecisionsRequest): Promise<runtime.ApiResponse<DecisionResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/decision/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DecisionResponseFromJSON(jsonValue));
    }

    /**
     */
    async listDecisions(requestParameters: ListDecisionsRequest): Promise<DecisionResponse> {
        const response = await this.listDecisionsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listMeetingSeriesRaw(requestParameters: ListMeetingSeriesRequest): Promise<runtime.ApiResponse<MeetingSeriesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/meetingseries/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingSeriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async listMeetingSeries(requestParameters: ListMeetingSeriesRequest): Promise<MeetingSeriesResponse> {
        const response = await this.listMeetingSeriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listMeetingsRaw(requestParameters: ListMeetingsRequest): Promise<runtime.ApiResponse<MeetingResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/meeting/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingResponseFromJSON(jsonValue));
    }

    /**
     */
    async listMeetings(requestParameters: ListMeetingsRequest): Promise<MeetingResponse> {
        const response = await this.listMeetingsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listRollCallVotesRaw(requestParameters: ListRollCallVotesRequest): Promise<runtime.ApiResponse<RollCallVoteResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/rollcallvote/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RollCallVoteResponseFromJSON(jsonValue));
    }

    /**
     */
    async listRollCallVotes(requestParameters: ListRollCallVotesRequest): Promise<RollCallVoteResponse> {
        const response = await this.listRollCallVotesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listSubItemsRaw(requestParameters: ListSubItemsRequest): Promise<runtime.ApiResponse<SubItemResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/agendasubitem/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async listSubItems(requestParameters: ListSubItemsRequest): Promise<SubItemResponse> {
        const response = await this.listSubItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async listUsers(requestParameters: ListUsersRequest): Promise<UserResponse> {
        const response = await this.listUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listVoteChoicesRaw(requestParameters: ListVoteChoicesRequest): Promise<runtime.ApiResponse<VoteChoiceResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/votechoice/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteChoiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async listVoteChoices(requestParameters: ListVoteChoicesRequest): Promise<VoteChoiceResponse> {
        const response = await this.listVoteChoicesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateAgendaItemRaw(requestParameters: PartialUpdateAgendaItemRequest): Promise<runtime.ApiResponse<AgendaItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateAgendaItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }

        if (requestParameters.mentions !== undefined) {
            queryParameters['mentions'] = requestParameters.mentions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/agendaitem/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AgendaItemToJSON(requestParameters.agendaItem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgendaItemFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateAgendaItem(requestParameters: PartialUpdateAgendaItemRequest): Promise<AgendaItem> {
        const response = await this.partialUpdateAgendaItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateAnonymousVoteRaw(requestParameters: PartialUpdateAnonymousVoteRequest): Promise<runtime.ApiResponse<AnonymousVote>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateAnonymousVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/anonymousvote/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AnonymousVoteToJSON(requestParameters.anonymousVote),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnonymousVoteFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateAnonymousVote(requestParameters: PartialUpdateAnonymousVoteRequest): Promise<AnonymousVote> {
        const response = await this.partialUpdateAnonymousVoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateDecisionRaw(requestParameters: PartialUpdateDecisionRequest): Promise<runtime.ApiResponse<Decision>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateDecision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/decision/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DecisionToJSON(requestParameters.decision),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DecisionFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateDecision(requestParameters: PartialUpdateDecisionRequest): Promise<Decision> {
        const response = await this.partialUpdateDecisionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateMeetingRaw(requestParameters: PartialUpdateMeetingRequest): Promise<runtime.ApiResponse<Meeting>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateMeeting.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/meeting/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingToJSON(requestParameters.meeting),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateMeeting(requestParameters: PartialUpdateMeetingRequest): Promise<Meeting> {
        const response = await this.partialUpdateMeetingRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateMeetingSeriesRaw(requestParameters: PartialUpdateMeetingSeriesRequest): Promise<runtime.ApiResponse<MeetingSeries>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateMeetingSeries.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/meetingseries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingSeriesToJSON(requestParameters.meetingSeries),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingSeriesFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateMeetingSeries(requestParameters: PartialUpdateMeetingSeriesRequest): Promise<MeetingSeries> {
        const response = await this.partialUpdateMeetingSeriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateRollCallVoteRaw(requestParameters: PartialUpdateRollCallVoteRequest): Promise<runtime.ApiResponse<RollCallVote>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateRollCallVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/rollcallvote/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RollCallVoteToJSON(requestParameters.rollCallVote),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RollCallVoteFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateRollCallVote(requestParameters: PartialUpdateRollCallVoteRequest): Promise<RollCallVote> {
        const response = await this.partialUpdateRollCallVoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateSubItemRaw(requestParameters: PartialUpdateSubItemRequest): Promise<runtime.ApiResponse<SubItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateSubItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/agendasubitem/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubItemToJSON(requestParameters.subItem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubItemFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateSubItem(requestParameters: PartialUpdateSubItemRequest): Promise<SubItem> {
        const response = await this.partialUpdateSubItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateUserRaw(requestParameters: PartialUpdateUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateUser(requestParameters: PartialUpdateUserRequest): Promise<User> {
        const response = await this.partialUpdateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateVoteChoiceRaw(requestParameters: PartialUpdateVoteChoiceRequest): Promise<runtime.ApiResponse<VoteChoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateVoteChoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/votechoice/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VoteChoiceToJSON(requestParameters.voteChoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteChoiceFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateVoteChoice(requestParameters: PartialUpdateVoteChoiceRequest): Promise<VoteChoice> {
        const response = await this.partialUpdateVoteChoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveAgendaItemRaw(requestParameters: RetrieveAgendaItemRequest): Promise<runtime.ApiResponse<AgendaItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveAgendaItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }

        if (requestParameters.mentions !== undefined) {
            queryParameters['mentions'] = requestParameters.mentions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/agendaitem/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgendaItemFromJSON(jsonValue));
    }

    /**
     */
    async retrieveAgendaItem(requestParameters: RetrieveAgendaItemRequest): Promise<AgendaItem> {
        const response = await this.retrieveAgendaItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveAnonymousVoteRaw(requestParameters: RetrieveAnonymousVoteRequest): Promise<runtime.ApiResponse<AnonymousVote>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveAnonymousVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/anonymousvote/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnonymousVoteFromJSON(jsonValue));
    }

    /**
     */
    async retrieveAnonymousVote(requestParameters: RetrieveAnonymousVoteRequest): Promise<AnonymousVote> {
        const response = await this.retrieveAnonymousVoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveDecisionRaw(requestParameters: RetrieveDecisionRequest): Promise<runtime.ApiResponse<Decision>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveDecision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/decision/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DecisionFromJSON(jsonValue));
    }

    /**
     */
    async retrieveDecision(requestParameters: RetrieveDecisionRequest): Promise<Decision> {
        const response = await this.retrieveDecisionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveMeetingRaw(requestParameters: RetrieveMeetingRequest): Promise<runtime.ApiResponse<Meeting>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveMeeting.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/meeting/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingFromJSON(jsonValue));
    }

    /**
     */
    async retrieveMeeting(requestParameters: RetrieveMeetingRequest): Promise<Meeting> {
        const response = await this.retrieveMeetingRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveMeetingSeriesRaw(requestParameters: RetrieveMeetingSeriesRequest): Promise<runtime.ApiResponse<MeetingSeries>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveMeetingSeries.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/meetingseries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingSeriesFromJSON(jsonValue));
    }

    /**
     */
    async retrieveMeetingSeries(requestParameters: RetrieveMeetingSeriesRequest): Promise<MeetingSeries> {
        const response = await this.retrieveMeetingSeriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveRollCallVoteRaw(requestParameters: RetrieveRollCallVoteRequest): Promise<runtime.ApiResponse<RollCallVote>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveRollCallVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/rollcallvote/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RollCallVoteFromJSON(jsonValue));
    }

    /**
     */
    async retrieveRollCallVote(requestParameters: RetrieveRollCallVoteRequest): Promise<RollCallVote> {
        const response = await this.retrieveRollCallVoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveSubItemRaw(requestParameters: RetrieveSubItemRequest): Promise<runtime.ApiResponse<SubItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveSubItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/agendasubitem/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubItemFromJSON(jsonValue));
    }

    /**
     */
    async retrieveSubItem(requestParameters: RetrieveSubItemRequest): Promise<SubItem> {
        const response = await this.retrieveSubItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveUserRaw(requestParameters: RetrieveUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async retrieveUser(requestParameters: RetrieveUserRequest): Promise<User> {
        const response = await this.retrieveUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveVoteChoiceRaw(requestParameters: RetrieveVoteChoiceRequest): Promise<runtime.ApiResponse<VoteChoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveVoteChoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/votechoice/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteChoiceFromJSON(jsonValue));
    }

    /**
     */
    async retrieveVoteChoice(requestParameters: RetrieveVoteChoiceRequest): Promise<VoteChoice> {
        const response = await this.retrieveVoteChoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateAgendaItemRaw(requestParameters: UpdateAgendaItemRequest): Promise<runtime.ApiResponse<AgendaItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAgendaItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }

        if (requestParameters.mentions !== undefined) {
            queryParameters['mentions'] = requestParameters.mentions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/agendaitem/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgendaItemToJSON(requestParameters.agendaItem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AgendaItemFromJSON(jsonValue));
    }

    /**
     */
    async updateAgendaItem(requestParameters: UpdateAgendaItemRequest): Promise<AgendaItem> {
        const response = await this.updateAgendaItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateAnonymousVoteRaw(requestParameters: UpdateAnonymousVoteRequest): Promise<runtime.ApiResponse<AnonymousVote>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAnonymousVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/anonymousvote/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnonymousVoteToJSON(requestParameters.anonymousVote),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnonymousVoteFromJSON(jsonValue));
    }

    /**
     */
    async updateAnonymousVote(requestParameters: UpdateAnonymousVoteRequest): Promise<AnonymousVote> {
        const response = await this.updateAnonymousVoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateDecisionRaw(requestParameters: UpdateDecisionRequest): Promise<runtime.ApiResponse<Decision>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDecision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/decision/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DecisionToJSON(requestParameters.decision),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DecisionFromJSON(jsonValue));
    }

    /**
     */
    async updateDecision(requestParameters: UpdateDecisionRequest): Promise<Decision> {
        const response = await this.updateDecisionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateMeetingRaw(requestParameters: UpdateMeetingRequest): Promise<runtime.ApiResponse<Meeting>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMeeting.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/meeting/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingToJSON(requestParameters.meeting),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingFromJSON(jsonValue));
    }

    /**
     */
    async updateMeeting(requestParameters: UpdateMeetingRequest): Promise<Meeting> {
        const response = await this.updateMeetingRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateMeetingSeriesRaw(requestParameters: UpdateMeetingSeriesRequest): Promise<runtime.ApiResponse<MeetingSeries>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMeetingSeries.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/meetingseries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingSeriesToJSON(requestParameters.meetingSeries),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingSeriesFromJSON(jsonValue));
    }

    /**
     */
    async updateMeetingSeries(requestParameters: UpdateMeetingSeriesRequest): Promise<MeetingSeries> {
        const response = await this.updateMeetingSeriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateRollCallVoteRaw(requestParameters: UpdateRollCallVoteRequest): Promise<runtime.ApiResponse<RollCallVote>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRollCallVote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.decision !== undefined) {
            queryParameters['decision'] = requestParameters.decision;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/rollcallvote/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RollCallVoteToJSON(requestParameters.rollCallVote),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RollCallVoteFromJSON(jsonValue));
    }

    /**
     */
    async updateRollCallVote(requestParameters: UpdateRollCallVoteRequest): Promise<RollCallVote> {
        const response = await this.updateRollCallVoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateSubItemRaw(requestParameters: UpdateSubItemRequest): Promise<runtime.ApiResponse<SubItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSubItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agendaItem !== undefined) {
            queryParameters['agenda_item'] = requestParameters.agendaItem;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/agendasubitem/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubItemToJSON(requestParameters.subItem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubItemFromJSON(jsonValue));
    }

    /**
     */
    async updateSubItem(requestParameters: UpdateSubItemRequest): Promise<SubItem> {
        const response = await this.updateSubItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<User> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateVoteChoiceRaw(requestParameters: UpdateVoteChoiceRequest): Promise<runtime.ApiResponse<VoteChoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVoteChoice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/votechoice/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VoteChoiceToJSON(requestParameters.voteChoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteChoiceFromJSON(jsonValue));
    }

    /**
     */
    async updateVoteChoice(requestParameters: UpdateVoteChoiceRequest): Promise<VoteChoice> {
        const response = await this.updateVoteChoiceRaw(requestParameters);
        return await response.value();
    }

}
