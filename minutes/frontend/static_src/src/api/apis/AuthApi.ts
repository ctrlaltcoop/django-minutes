/* tslint:disable */
/* eslint-disable */
/**
 * Minutes API V1
 * django-minutes API specifications
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InvitationRequest,
    InvitationRequestFromJSON,
    InvitationRequestToJSON,
    PasswordChange,
    PasswordChangeFromJSON,
    PasswordChangeToJSON,
    TokenClaim,
    TokenClaimFromJSON,
    TokenClaimToJSON,
    TokenRefresh,
    TokenRefreshFromJSON,
    TokenRefreshToJSON,
    TokenUserCredentials,
    TokenUserCredentialsFromJSON,
    TokenUserCredentialsToJSON,
} from '../models';

export interface CreateInvitationRequestRequest {
    invitationRequest?: InvitationRequest;
}

export interface CreatePasswordChangeRequest {
    passwordChange?: PasswordChange;
}

export interface CreateTokenSetByClaimRequest {
    tokenClaim?: TokenClaim;
}

export interface CreateTokenSetByCredentialsRequest {
    tokenUserCredentials?: TokenUserCredentials;
}

export interface CreateTokenSetByRefreshRequest {
    tokenRefresh?: TokenRefresh;
}

/**
 * no description
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async createInvitationRequestRaw(requestParameters: CreateInvitationRequestRequest): Promise<runtime.ApiResponse<InvitationRequest>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/invitation/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationRequestToJSON(requestParameters.invitationRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationRequestFromJSON(jsonValue));
    }

    /**
     */
    async createInvitationRequest(requestParameters: CreateInvitationRequestRequest): Promise<InvitationRequest> {
        const response = await this.createInvitationRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createPasswordChangeRaw(requestParameters: CreatePasswordChangeRequest): Promise<runtime.ApiResponse<PasswordChange>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/changepassword/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordChangeToJSON(requestParameters.passwordChange),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordChangeFromJSON(jsonValue));
    }

    /**
     */
    async createPasswordChange(requestParameters: CreatePasswordChangeRequest): Promise<PasswordChange> {
        const response = await this.createPasswordChangeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createTokenSetByClaimRaw(requestParameters: CreateTokenSetByClaimRequest): Promise<runtime.ApiResponse<TokenClaim>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/token-claim/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenClaimToJSON(requestParameters.tokenClaim),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenClaimFromJSON(jsonValue));
    }

    /**
     */
    async createTokenSetByClaim(requestParameters: CreateTokenSetByClaimRequest): Promise<TokenClaim> {
        const response = await this.createTokenSetByClaimRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createTokenSetByCredentialsRaw(requestParameters: CreateTokenSetByCredentialsRequest): Promise<runtime.ApiResponse<TokenUserCredentials>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/token/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenUserCredentialsToJSON(requestParameters.tokenUserCredentials),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenUserCredentialsFromJSON(jsonValue));
    }

    /**
     */
    async createTokenSetByCredentials(requestParameters: CreateTokenSetByCredentialsRequest): Promise<TokenUserCredentials> {
        const response = await this.createTokenSetByCredentialsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createTokenSetByRefreshRaw(requestParameters: CreateTokenSetByRefreshRequest): Promise<runtime.ApiResponse<TokenRefresh>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/token-refresh/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRefreshToJSON(requestParameters.tokenRefresh),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenRefreshFromJSON(jsonValue));
    }

    /**
     */
    async createTokenSetByRefresh(requestParameters: CreateTokenSetByRefreshRequest): Promise<TokenRefresh> {
        const response = await this.createTokenSetByRefreshRaw(requestParameters);
        return await response.value();
    }

}
